#!/bin/bash
#
# BigBrainWarp
#
version() {
  echo -e "\nBigBrainWarp March 2021 (Beta)\n"
}
#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "
\033[38;5;141mCOMMAND:\033[0m
   $(basename $0)

\033[38;5;141mREQUIRED ARGUMENTS:\033[0m
\t\033[38;5;197m-in_space\033[0m 	        : space of input data (bigbrain, bigbrainsym, icbm, fsaverage or fs_LR)
\t\033[38;5;197m-out_space\033[0m 	      : space of output data (bigbrain, bigbrainsym, icbm, fsaverage or fs_LR)
\t\033[38;5;197m-wd\033[0m 	              : Path to a working directory, where data will be output

\033[38;5;141mINPUT ARGUMENTS (use either -in_vol or both -in_lh and -in_rh):\033[0m
\t\033[38;5;197m-in_vol\033[0m            : full path to input data. Must be whole brain. Can be mnc, nii or nii.gz
\t\033[38;5;197m-in_lh\033[0m             : full path to input data for left hemisphere. Can be .label.gii, .annot, .shape.gii, .curv or .txt
\t\033[38;5;197m-in_rh\033[0m             : full path to input data for right hemisphere. Can be .label.gii, .annot, .shape.gii, .curv or .txt
\t\033[38;5;197m-desc\033[0m              : descriptor of input data, which will be used to name the output.

\033[38;5;141mEXTRA ARGUMENTS:\033[0m
\t\033[38;5;197m-interp\033[0m           : interpolation method. For -in_vol, it can be trilinear (default), tricubic, nearest or sinc. For -in_lh/-in_rh, can be linear or nearest. Only works for .txt, however. Other types are forced to defaults (label.gii and .annot to nearest, shape.gii and .curv to linear)
\t\033[38;5;197m-out_type\033[0m         : (optional) specify output in surface or volume space for bigbrain and bigbrainsym. Otherwise, defaults to the same type as the input.  
\t\033[38;5;197m-out_den\033[0m          : (optional) density of output mesh. Only applicable for -in_lh/-in_rh and if out_space is fs_LR. Can be 164 or 32. Default is 32. 
\t\033[38;5;197m-h|-help\033[0m          : Print help

Casey Paquola, MNI, MICA Lab, 2021
https://bigbrainwarp.readthedocs.io/
"
}

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  --in_space)
    in_space=$2
    shift;shift
  ;;
  --out_space)
    out_space=$2
    shift;shift
  ;;
  --wd)
    wd=$2
    shift;shift
  ;;
  --interp)
    interp=$2
    shift;shift
  ;;
  --in_vol)
    in_vol=$2
    shift;shift
  ;;
  --in_lh)
    in_lh=$2
    shift;shift
  ;;
  --in_rh)
    in_rh=$2
    shift;shift
  ;;
  --desc)
    desc=$2
    shift;shift
  ;;   
  --out_type)
    out_type=$2
    shift;shift
  ;;
  --out_den)
    out_den=$2
    shift;shift
  ;;
  -*)
    echo "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($in_space $out_space $wd $desc)
if [ ${#arg[@]} -lt 3 ]; then
  echo "One or more mandatory arguments are missing:
               -in_space : $in_space
               -out_space : $out_space
               -wd : $wd
               -desc : $desc"
fi

# try to copy license over if in the docker
if [[ ! -f $FREESURFER_HOME/license.txt ]] ; then
    if [[ -f /license/license.txt ]] ; then
      cp /license/license.txt $FREESURFER_HOME/
    else
      print "did not find local license of Freesurfer, nor a mounted license in the case of Docker use"
    fi
fi

# identify whether volume or surface based transformation will be performed
if [[ -z $in_vol ]] ; then
    if [[ -z $in_lh ]] || [[ -z $in_rh ]] ; then
      print "did not find required input arguments"
    else
      in_type=surface
    fi
else
  in_type=volume
fi
if [[ -z $out_type ]] ; then
  surface_spaces="fsaverage fs_LR"
  if [[ "$surface_spaces" =~ .*"$out_space".* ]] ; then
    out_type=surface
  elif [[ "$surface_spaces" =~ .*icbm.* ]] ; then
    out_type=volume
  else
    out_type=$in_type
  fi
fi

# running through the possible options of transformations
if [[ "$in_type" == "volume" ]] ; then
    if [[ -z "$interp" ]] ; then
        interp=trilinear
    fi
    if [[ $in_space == "bigbrain" ]] || [[ $in_space == "bigbrainsym" ]] ; then
      if [[ $in_space == "bigbrain" ]] ; then
        echo "using bigbrain_to_icbm.sh"
        bash $bbwDir/scripts/bigbrain_to_icbm.sh $in_vol histological $interp $wd $out_name
        echo "employed nonlinear transformation from bigbrain to icbm"
      elif [[ $in_space == "bigbrainsym" ]] ; then
        echo "using bigbrain_to_icbm.sh"
        bash $bbwDir/scripts/bigbrain_to_icbm.sh $in_vol sym $interp $wd $out_name
        echo "employed nonlinear transformation from bigbrainsym to icbm"
      fi
    elif [[ "$out_type" == "volume" ]] ; then
        if [[ $out_space == "bigbrain" ]] ; then
          echo "using icbm_to_bigbrain.sh"
          bash $bbwDir/scripts/icbm_to_bigbrain.sh $in_vol histological $interp $wd $out_name
          echo "employed nonlinear transformation from icbm to bigbrain"
        elif [[ $out_space == "bigbrainsym" ]] ; then
          echo "using icbm_to_bigbrain.sh"
          bash $bbwDir/scripts/icbm_to_bigbrain.sh $in_vol sym $interp $wd $out_name
          echo "employed nonlinear transformation from icbm to bigbrainsym"
        fi
    elif [[ "$out_type" == "surface" ]] ; then
      echo "using icbm_to_bigbrainsurf.sh"
      bash $bbwDir/scripts/icbm_to_bigbrainsurf.sh $in_vol $interp $wd
      echo "employed multimodal surface matching transformation from icbm to bigbrain surface"
    fi
elif [[ "$in_type" == "surface" ]] ; then
    if [[ -z "$interp" ]] ; then
        interp=nearest
    fi
    if [[ $in_space =~ .*"bigbrain".* ]] ; then
        if [[ $out_space == icbm ]] ; then
          echo "using bigbrainsurf_to_icbm.sh"
          bash $bbwDir/scripts/bigbrainsurf_to_icbm.sh $in_lh $in_rh $wd/$out_name
          echo "running multimodal surface matching transformation from bigbrain surface to icbm"
        else
          echo "using bigbrain_to_fsaverage.sh"
          # check for output density or set to default
          if [[ -z $out_dens ]] ; then
            if [[ "fsaverage" == "$out_space" ]] ; then
              out_dens=164
            elif [[ "fs_LR" =~ "$out_space" ]] ; then
              out_dens=32
            fi
          fi
          bash $bbwDir/scripts/bigbrain_to_fsaverage.sh $in_lh $in_rh $out_space $wd/$out_name $interp $out_dens 
          echo "employed multimodal surface matching transformation from bigbrain surface to $out_space"
        fi
    else
        echo "using fsaverage_to_bigbrain.sh"
        bash $bbwDir/scripts/fsaverage_to_bigbrain.sh $in_lh $in_rh $in_space $desc $wd $interp
        echo "employed multimodal surface matching transformation from icbm to bigbrain surface"
    fi
fi
